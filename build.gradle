plugins {
    id 'java'
    id 'application'
    id 'org.beryx.jlink' version '2.24.4'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com/" }
    maven { url "https://jitpack.io" }
}

ext {
    junitVersion = '5.8.1'
    btVersion = '1.1.0' // Replace with the actual version
    javafxVersion = '17.0.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.release.set(17)
}

application {
    mainModule = 'bl00dy_c0d3_.echovr_installer'
    mainClass = 'bl00dy_c0d3_.echovr_installer.EchoVRInstaller'
    applicationDefaultJvmArgs = [
            "-Djava.library.path=libs/",
            "--add-opens=java.base/java.lang=ALL-UNNAMED",
            "--add-opens=java.base/java.util=ALL-UNNAMED",
            "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
            "--add-reads=jlibtorrent=java.logging"
    ]
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    implementation files('libs/jlibtorrent-1.2.19.0.jar')
    implementation files('libs/jlibtorrent-linux-1.2.19.0.jar')
    implementation "org.openjfx:javafx-controls:${javafxVersion}"
    implementation "org.openjfx:javafx-fxml:${javafxVersion}"
    implementation 'org.jetbrains:annotations:24.1.0'
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes "Main-Class": "bl00dy_c0d3_.echovr_installer.EchoVRInstaller"
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('copyLibjpeg', Copy) {
    from 'src/main/resources/libjpeg.so.62'
    into "$buildDir/jpackage/EchoVR_Installer/lib/runtime/lib/"
}

def os = org.gradle.internal.os.OperatingSystem.current()

jlink {
    options = ['--add-modules', 'jdk.zipfs']
    jpackage {
        installerName = 'Echo_VR_Installer'

        if (os.isWindows()) {
            appVersion = '0.3'
            icon = 'icon.ico'  // Update path

            installerOptions = [
                    '--app-version', '0.3',
                    '--vendor', 'bl00dy-c0d3',
                    '--name', 'Echo_VR_Installer',
                    '--install-dir', 'EchoVRInstaller',
                    '--icon', 'icon.ico',  // Update path
                    '--win-dir-chooser',
                    '--win-shortcut',
                    '--win-menu',
                    '--win-menu-group', 'EchoVRInstaller',
            ]
        } else if (os.isMacOsX()) {
            appVersion = '1.3'
            installerOptions = [
                    '--mac-package-identifier', 'IhateApple',
            ]
        } else {
            appVersion = '0.3'
            icon = 'icon.png'  // Update path if needed

            // Ensure copyLibjpeg runs after jpackage
            tasks.named('jpackage').configure {
                finalizedBy(copyLibjpeg)
            }
        }
    }
}

tasks.register('copyJLibTorrent', Copy) {
    from 'libs'
    into os.isWindows() ? "$buildDir/jpackage/EchoVR_Installer/libs/" : "$buildDir/jpackage/EchoVR_Installer/bin/libs"
}

tasks.register('copyTorrentFiles', Copy) {
    from 'p2pFiles'
    into os.isWindows() ? "$buildDir/jpackage/EchoVR_Installer/p2pFiles/" : "$buildDir/jpackage/EchoVR_Installer/bin/p2pFiles"
}

// Ensure copy tasks run after jpackage
tasks.named('jpackage').configure {
    finalizedBy('copyJLibTorrent')
    finalizedBy('copyTorrentFiles')
}

// Ensure build depends on jlink and jpackage
tasks.named('build').configure {
    dependsOn('jlink')
    dependsOn('jpackage')
}